+ Building build/kernel.elf [build/build]
+ Building build/kernel.bin [objcopy]
warning: the feature `asm_const` has been stable since 1.82.0 and no longer requires an attribute to enable
 --> /mnt/c/Users/ihele/rpi-os/jellyos/lib/kernel_api/src/lib.rs:1:12
  |
1 | #![feature(asm_const)]
  |            ^^^^^^^^^
  |
  = note: `#[warn(stable_features)]` on by default

warning: associated function `new` is never used
   --> /mnt/c/Users/ihele/rpi-os/jellyos/lib/fat32/src/util.rs:136:12
    |
135 | impl<T> FATCursor<T> {
    | -------------------- associated function in this implementation
136 |     pub fn new(inner: T) -> FATCursor<T> {
    |            ^^^
    |
    = note: `#[warn(dead_code)]` on by default

warning: unused import: `alloc::boxed::Box`
 --> src/net/uspi.rs:3:5
  |
3 | use alloc::boxed::Box;
  |     ^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused import: `alloc::string::String`
 --> src/net/uspi.rs:4:5
  |
4 | use alloc::string::String;
  |     ^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `GlobalAlloc`
 --> src/net/uspi.rs:5:19
  |
5 | use core::alloc::{GlobalAlloc, Layout};
  |                   ^^^^^^^^^^^

warning: unused import: `core::slice`
 --> src/net/uspi.rs:7:5
  |
7 | use core::slice;
  |     ^^^^^^^^^^^

warning: unused imports: `Controller` and `Interrupt`
  --> src/net/uspi.rs:10:21
   |
10 | use pi::interrupt::{Controller, Interrupt};
   |                     ^^^^^^^^^^  ^^^^^^^^^

warning: unused import: `pi::timer::spin_sleep`
  --> src/net/uspi.rs:11:5
   |
11 | use pi::timer::spin_sleep;
   |     ^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `crate::traps::irq::IrqHandlerRegistry`
  --> src/net/uspi.rs:16:5
   |
16 | use crate::traps::irq::IrqHandlerRegistry;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `crate::ALLOCATOR`
  --> src/net/uspi.rs:17:5
   |
17 | use crate::ALLOCATOR;
   |     ^^^^^^^^^^^^^^^^

warning: unused import: `alloc::collections::BTreeMap`
 --> src/net.rs:5:5
  |
5 | use alloc::collections::BTreeMap;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `alloc::vec::Vec`
 --> src/net.rs:7:5
  |
7 | use alloc::vec::Vec;
  |     ^^^^^^^^^^^^^^^

warning: unused imports: `EthernetInterfaceBuilder` and `NeighborCache`
  --> src/net.rs:12:22
   |
12 | use smoltcp::iface::{EthernetInterfaceBuilder, NeighborCache};
   |                      ^^^^^^^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^

warning: unused imports: `IpAddress` and `IpCidr`
  --> src/net.rs:16:21
   |
16 | use smoltcp::wire::{IpAddress, IpCidr};
   |                     ^^^^^^^^^  ^^^^^^

warning: unused import: `alloc::vec::Vec`
 --> src/process/process.rs:2:5
  |
2 | use alloc::vec::Vec;
  |     ^^^^^^^^^^^^^^^

warning: unused import: `shim::io`
 --> src/process/process.rs:3:5
  |
3 | use shim::io;
  |     ^^^^^^^^

warning: unused import: `smoltcp::socket::SocketHandle`
 --> src/process/process.rs:7:5
  |
7 | use smoltcp::socket::SocketHandle;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `crate::console::kprintln`
 --> src/process/process.rs:9:5
  |
9 | use crate::console::kprintln;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `alloc::vec::Vec`
 --> src/process/scheduler.rs:3:5
  |
3 | use alloc::vec::Vec;
  |     ^^^^^^^^^^^^^^^

warning: unused import: `pi::interrupt`
 --> src/process/scheduler.rs:4:5
  |
4 | use pi::interrupt;
  |     ^^^^^^^^^^^^^

warning: unused import: `core::borrow::Borrow`
 --> src/process/scheduler.rs:6:5
  |
6 | use core::borrow::Borrow;
  |     ^^^^^^^^^^^^^^^^^^^^

warning: unused import: `core::mem`
 --> src/process/scheduler.rs:9:5
  |
9 | use core::mem;
  |     ^^^^^^^^^

warning: unused import: `core::time::Duration`
  --> src/process/scheduler.rs:10:5
   |
10 | use core::time::Duration;
   |     ^^^^^^^^^^^^^^^^^^^^

warning: unused import: `smoltcp::time::Instant`
  --> src/process/scheduler.rs:15:5
   |
15 | use smoltcp::time::Instant;
   |     ^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `crate::console::kprint`
  --> src/process/scheduler.rs:17:5
   |
17 | use crate::console::kprint;
   |     ^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `crate::console::kprintln`
  --> src/process/scheduler.rs:18:5
   |
18 | use crate::console::kprintln;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused imports: `get_preemptive_counter`, `is_mmu_ready`, and `local_irq`
  --> src/process/scheduler.rs:22:22
   |
22 | use crate::percore::{get_preemptive_counter, is_mmu_ready, local_irq};
   |                      ^^^^^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^  ^^^^^^^^^

warning: unused import: `crate::GLOBAL_IRQ`
  --> src/process/scheduler.rs:27:5
   |
27 | use crate::GLOBAL_IRQ;
   |     ^^^^^^^^^^^^^^^^^

warning: unused imports: `ETHERNET` and `USB`
  --> src/process/scheduler.rs:28:13
   |
28 | use crate::{ETHERNET, USB};
   |             ^^^^^^^^  ^^^

warning: unused import: `pi::interrupt::Interrupt`
   --> src/process/scheduler.rs:160:13
    |
160 |         use pi::interrupt::Interrupt;
    |             ^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `crate::shell`
   --> src/process/scheduler.rs:375:5
    |
375 | use crate::shell;
    |     ^^^^^^^^^^^^

warning: unused import: `aarch64::current_el`
 --> src/shell.rs:1:5
  |
1 | use aarch64::current_el;
  |     ^^^^^^^^^^^^^^^^^^^

warning: unused import: `crate::Duration`
   --> src/shell.rs:264:29
    |
264 |                         use crate::Duration;
    |                             ^^^^^^^^^^^^^^^

warning: unused import: `core::fmt`
 --> src/traps/frame.rs:1:5
  |
1 | use core::fmt;
  |     ^^^^^^^^^

warning: unused imports: `affinity` and `current_el`
 --> src/traps/syscall.rs:1:15
  |
1 | use aarch64::{affinity, current_el};
  |               ^^^^^^^^  ^^^^^^^^^^

warning: unused import: `IpAddress`
 --> src/traps/syscall.rs:5:21
  |
5 | use smoltcp::wire::{IpAddress, IpEndpoint};
  |                     ^^^^^^^^^

warning: unused import: `kprintln`
 --> src/traps/syscall.rs:7:30
  |
7 | use crate::console::{kprint, kprintln, CONSOLE};
  |                              ^^^^^^^^

warning: unused import: `ETHERNET`
  --> src/traps/syscall.rs:11:13
   |
11 | use crate::{ETHERNET, SCHEDULER};
   |             ^^^^^^^^

warning: unused import: `core::borrow::Borrow`
 --> src/traps/irq.rs:2:5
  |
2 | use core::borrow::Borrow;
  |     ^^^^^^^^^^^^^^^^^^^^

warning: unused import: `kprint`
 --> src/traps.rs:6:22
  |
6 | use crate::console::{kprint, kprintln};
  |                      ^^^^^^

warning: unused import: `current_el`
  --> src/traps.rs:11:25
   |
11 | use aarch64::{affinity, current_el, FAR_EL1};
   |                         ^^^^^^^^^^

warning: unused import: `crate::percore`
  --> src/traps.rs:17:5
   |
17 | use crate::percore;
   |     ^^^^^^^^^^^^^^

warning: unused import: `shell`
  --> src/traps.rs:44:13
   |
44 | use crate::{shell, IRQ};
   |             ^^^^^

warning: unused import: `SubAssign`
 --> src/vm/pagetable.rs:2:34
  |
2 | use core::ops::{Deref, DerefMut, SubAssign};
  |                                  ^^^^^^^^^

warning: unused import: `self`
 --> src/vm/pagetable.rs:9:24
  |
9 | use crate::allocator::{self, memory_map };
  |                        ^^^^

warning: unused imports: `kprint` and `kprintln`
  --> src/vm/pagetable.rs:10:22
   |
10 | use crate::console::{kprint, kprintln};
   |                      ^^^^^^  ^^^^^^^^

warning: unused import: `core::time::Duration`
  --> src/vm.rs:10:5
   |
10 | use core::time::Duration;
   |     ^^^^^^^^^^^^^^^^^^^^

warning: unused import: `crate::console::kprintln`
  --> src/vm.rs:12:5
   |
12 | use crate::console::kprintln;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `allocator::memory_map`
  --> src/main.rs:41:5
   |
41 | use allocator::memory_map;
   |     ^^^^^^^^^^^^^^^^^^^^^

warning: the feature `const_mut_refs` has been stable since 1.83.0 and no longer requires an attribute to enable
  --> src/main.rs:12:12
   |
12 | #![feature(const_mut_refs)]
   |            ^^^^^^^^^^^^^^
   |
   = note: `#[warn(stable_features)]` on by default

warning: the feature `asm_const` has been stable since 1.82.0 and no longer requires an attribute to enable
  --> src/main.rs:15:12
   |
15 | #![feature(asm_const)]
   |            ^^^^^^^^^

warning: the feature `const_option` has been stable since 1.83.0 and no longer requires an attribute to enable
  --> src/main.rs:13:12
   |
13 | #![feature(const_option)]
   |            ^^^^^^^^^^^^

warning: unreachable statement
  --> src/traps.rs:69:13
   |
68 |             panic!("{:#?}, {}, {:#?}", info, esr, Syndrome::from(esr));
   |             ---------------------------------------------------------- any code following this expression is unreachable
69 |             tf.pc += 4;
   |             ^^^^^^^^^^^ unreachable statement
   |
   = note: `#[warn(unreachable_code)]` on by default

warning: unused variable: `size`
   --> src/net/uspi.rs:152:11
    |
152 | fn malloc(size: u32) -> *mut c_void {
    |           ^^^^ help: if this is intentional, prefix it with an underscore: `_size`
    |
    = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `ptr`
   --> src/net/uspi.rs:158:9
    |
158 | fn free(ptr: *mut c_void) {
    |         ^^^ help: if this is intentional, prefix it with an underscore: `_ptr`

warning: unused variable: `nMilliSeconds`
   --> src/net/uspi.rs:164:27
    |
164 | pub fn TimerSimpleMsDelay(nMilliSeconds: u32) {
    |                           ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_nMilliSeconds`

warning: unused variable: `nMicroSeconds`
   --> src/net/uspi.rs:170:27
    |
170 | pub fn TimerSimpleusDelay(nMicroSeconds: u32) {
    |                           ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_nMicroSeconds`

warning: unused variable: `nMilliSeconds`
   --> src/net/uspi.rs:176:16
    |
176 | pub fn MsDelay(nMilliSeconds: u32) {
    |                ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_nMilliSeconds`

warning: unused variable: `nMicroSeconds`
   --> src/net/uspi.rs:182:16
    |
182 | pub fn usDelay(nMicroSeconds: u32) {
    |                ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_nMicroSeconds`

warning: unused variable: `nIRQ`
   --> src/net/uspi.rs:194:32
    |
194 | pub unsafe fn ConnectInterrupt(nIRQ: u32, pHandler: TInterruptHandler, pParam: *mut c_void) {
    |                                ^^^^ help: if this is intentional, prefix it with an underscore: `_nIRQ`

warning: unused variable: `pHandler`
   --> src/net/uspi.rs:194:43
    |
194 | pub unsafe fn ConnectInterrupt(nIRQ: u32, pHandler: TInterruptHandler, pParam: *mut c_void) {
    |                                           ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_pHandler`

warning: unused variable: `pParam`
   --> src/net/uspi.rs:194:72
    |
194 | pub unsafe fn ConnectInterrupt(nIRQ: u32, pHandler: TInterruptHandler, pParam: *mut c_void) {
    |                                                                        ^^^^^^ help: if this is intentional, prefix it with an underscore: `_pParam`

warning: unused variable: `pMessage`
   --> src/net/uspi.rs:201:63
    |
201 | pub unsafe fn DoLogWrite(_pSource: *const u8, _Severity: u32, pMessage: *const u8) {
    |                                                               ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_pMessage`

warning: unused variable: `pExpr`
   --> src/net/uspi.rs:212:37
    |
212 | pub unsafe fn uspi_assertion_failed(pExpr: *const u8, pFile: *const u8, nLine: u32) {
    |                                     ^^^^^ help: if this is intentional, prefix it with an underscore: `_pExpr`

warning: unused variable: `pFile`
   --> src/net/uspi.rs:212:55
    |
212 | pub unsafe fn uspi_assertion_failed(pExpr: *const u8, pFile: *const u8, nLine: u32) {
    |                                                       ^^^^^ help: if this is intentional, prefix it with an underscore: `_pFile`

warning: unused variable: `nLine`
   --> src/net/uspi.rs:212:73
    |
212 | pub unsafe fn uspi_assertion_failed(pExpr: *const u8, pFile: *const u8, nLine: u32) {
    |                                                                         ^^^^^ help: if this is intentional, prefix it with an underscore: `_nLine`

warning: unused variable: `timestamp`
   --> src/net.rs:164:24
    |
164 |     fn poll(&mut self, timestamp: Instant) {
    |                        ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_timestamp`

warning: unused variable: `timestamp`
   --> src/net.rs:171:30
    |
171 |     fn poll_delay(&mut self, timestamp: Instant) -> Duration {
    |                              ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_timestamp`

warning: unused variable: `port`
   --> src/net.rs:177:33
    |
177 |     pub fn mark_port(&mut self, port: u16) -> Option<u16> {
    |                                 ^^^^ help: if this is intentional, prefix it with an underscore: `_port`

warning: unused variable: `port`
   --> src/net.rs:183:34
    |
183 |     pub fn erase_port(&mut self, port: u16) -> Option<u16> {
    |                                  ^^^^ help: if this is intentional, prefix it with an underscore: `_port`

warning: unused variable: `timestamp`
   --> src/net.rs:233:24
    |
233 |     pub fn poll(&self, timestamp: Instant) {
    |                        ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_timestamp`

warning: unused variable: `tf`
   --> src/process/scheduler.rs:317:45
    |
317 |     fn release_process_resources(&mut self, tf: &mut TrapFrame) {
    |                                             ^^ help: if this is intentional, prefix it with an underscore: `_tf`

warning: variable `error` is assigned to, but never used
   --> src/process/scheduler.rs:352:13
    |
352 |         let error: u64;
    |             ^^^^^
    |
    = note: consider using `_error` instead

warning: variable `elapsed_ms` is assigned to, but never used
   --> src/process/scheduler.rs:353:13
    |
353 |         let elapsed_ms: u64;
    |             ^^^^^^^^^^
    |
    = note: consider using `_elapsed_ms` instead

warning: value assigned to `elapsed_ms` is never read
   --> src/process/scheduler.rs:363:32
    |
363 |                 ems = out(reg) elapsed_ms,
    |                                ^^^^^^^^^^
    |
    = help: maybe it is overwritten before being read?
    = note: `#[warn(unused_assignments)]` on by default

warning: value assigned to `error` is never read
   --> src/process/scheduler.rs:364:34
    |
364 |                 error = out(reg) error,
    |                                  ^^^^^
    |
    = help: maybe it is overwritten before being read?

warning: unused variable: `ms`
   --> src/shell.rs:266:41
    |
266 | ...                   && let Some(ms) =
    |                                   ^^ help: if this is intentional, prefix it with an underscore: `_ms`

warning: unused variable: `sock_idx`
   --> src/traps/syscall.rs:157:22
    |
157 | pub fn sys_sock_send(sock_idx: usize, va: usize, len: usize, tf: &mut TrapFrame) {
    |                      ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_sock_idx`

warning: unused variable: `va`
   --> src/traps/syscall.rs:157:39
    |
157 | pub fn sys_sock_send(sock_idx: usize, va: usize, len: usize, tf: &mut TrapFrame) {
    |                                       ^^ help: if this is intentional, prefix it with an underscore: `_va`

warning: unused variable: `len`
   --> src/traps/syscall.rs:157:50
    |
157 | pub fn sys_sock_send(sock_idx: usize, va: usize, len: usize, tf: &mut TrapFrame) {
    |                                                  ^^^ help: if this is intentional, prefix it with an underscore: `_len`

warning: unused variable: `tf`
   --> src/traps/syscall.rs:157:62
    |
157 | pub fn sys_sock_send(sock_idx: usize, va: usize, len: usize, tf: &mut TrapFrame) {
    |                                                              ^^ help: if this is intentional, prefix it with an underscore: `_tf`

warning: unused variable: `sock_idx`
   --> src/traps/syscall.rs:178:22
    |
178 | pub fn sys_sock_recv(sock_idx: usize, va: usize, len: usize, tf: &mut TrapFrame) {
    |                      ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_sock_idx`

warning: unused variable: `va`
   --> src/traps/syscall.rs:178:39
    |
178 | pub fn sys_sock_recv(sock_idx: usize, va: usize, len: usize, tf: &mut TrapFrame) {
    |                                       ^^ help: if this is intentional, prefix it with an underscore: `_va`

warning: unused variable: `len`
   --> src/traps/syscall.rs:178:50
    |
178 | pub fn sys_sock_recv(sock_idx: usize, va: usize, len: usize, tf: &mut TrapFrame) {
    |                                                  ^^^ help: if this is intentional, prefix it with an underscore: `_len`

warning: unused variable: `tf`
   --> src/traps/syscall.rs:178:62
    |
178 | pub fn sys_sock_recv(sock_idx: usize, va: usize, len: usize, tf: &mut TrapFrame) {
    |                                                              ^^ help: if this is intentional, prefix it with an underscore: `_tf`

warning: unused variable: `tf`
   --> src/traps/syscall.rs:187:24
    |
187 | pub fn sys_sock_create(tf: &mut TrapFrame) {
    |                        ^^ help: if this is intentional, prefix it with an underscore: `_tf`

warning: unused variable: `sock_idx`
   --> src/traps/syscall.rs:207:24
    |
207 | pub fn sys_sock_status(sock_idx: usize, tf: &mut TrapFrame) {
    |                        ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_sock_idx`

warning: unused variable: `tf`
   --> src/traps/syscall.rs:207:41
    |
207 | pub fn sys_sock_status(sock_idx: usize, tf: &mut TrapFrame) {
    |                                         ^^ help: if this is intentional, prefix it with an underscore: `_tf`

warning: unused variable: `sock_idx`
   --> src/traps/syscall.rs:232:5
    |
232 |     sock_idx: usize,
    |     ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_sock_idx`

warning: unused variable: `remote_endpoint`
   --> src/traps/syscall.rs:233:5
    |
233 |     remote_endpoint: impl Into<IpEndpoint>,
    |     ^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_remote_endpoint`

warning: unused variable: `tf`
   --> src/traps/syscall.rs:234:5
    |
234 |     tf: &mut TrapFrame,
    |     ^^ help: if this is intentional, prefix it with an underscore: `_tf`

warning: unused variable: `sock_idx`
   --> src/traps/syscall.rs:254:24
    |
254 | pub fn sys_sock_listen(sock_idx: usize, local_port: u16, tf: &mut TrapFrame) {
    |                        ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_sock_idx`

warning: unused variable: `local_port`
   --> src/traps/syscall.rs:254:41
    |
254 | pub fn sys_sock_listen(sock_idx: usize, local_port: u16, tf: &mut TrapFrame) {
    |                                         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_local_port`

warning: unused variable: `tf`
   --> src/traps/syscall.rs:254:58
    |
254 | pub fn sys_sock_listen(sock_idx: usize, local_port: u16, tf: &mut TrapFrame) {
    |                                                          ^^ help: if this is intentional, prefix it with an underscore: `_tf`

warning: unused variable: `kind`
  --> src/traps.rs:59:39
   |
59 |                 Syndrome::DataAbort { kind, level } => {
   |                                       ^^^^ help: try ignoring the field: `kind: _`

warning: unused variable: `level`
  --> src/traps.rs:59:45
   |
59 |                 Syndrome::DataAbort { kind, level } => {
   |                                             ^^^^^ help: try ignoring the field: `level: _`

warning: fields `port_map` and `ethernet` are never read
   --> src/net.rs:150:5
    |
146 | pub struct EthernetDriver {
    |            -------------- fields in this struct
...
150 |     port_map: [u64; PORT_MAP_SIZE],
    |     ^^^^^^^^
151 |     /// Internal ethernet interface
152 |     ethernet: EthernetInterface<UsbEthernet>,
    |     ^^^^^^^^
    |
    = note: `#[warn(dead_code)]` on by default

warning: method `poll` is never used
   --> src/net.rs:164:8
    |
155 | impl EthernetDriver {
    | ------------------- method in this implementation
...
164 |     fn poll(&mut self, timestamp: Instant) {
    |        ^^^^

warning: constant `DEBUG_USPI` is never used
  --> src/net/uspi.rs:19:7
   |
19 | const DEBUG_USPI: bool = false;
   |       ^^^^^^^^^^

warning: function `layout` is never used
   --> src/net/uspi.rs:147:11
    |
147 | unsafe fn layout(size: usize) -> Layout {
    |           ^^^^^^

warning: function `poll_ethernet` is never used
   --> src/process/scheduler.rs:219:15
    |
219 | extern "C" fn poll_ethernet(_: TKernelTimerHandle, _: *mut c_void, _: *mut c_void) {
    |               ^^^^^^^^^^^^^

warning: method `release_process_resources` is never used
   --> src/process/scheduler.rs:317:8
    |
230 | impl Scheduler {
    | -------------- method in this implementation
...
317 |     fn release_process_resources(&mut self, tf: &mut TrapFrame) {
    |        ^^^^^^^^^^^^^^^^^^^^^^^^^

warning: function `test_user_process` is never used
   --> src/process/scheduler.rs:349:19
    |
349 | pub extern "C" fn test_user_process() -> ! {
    |                   ^^^^^^^^^^^^^^^^^

warning: function `to_user_slice_mut` is never used
   --> src/traps/syscall.rs:104:11
    |
104 | unsafe fn to_user_slice_mut<'a>(va: usize, len: usize) -> OsResult<&'a mut [u8]> {
    |           ^^^^^^^^^^^^^^^^^

warning: function `sys_sock_send` is never used
   --> src/traps/syscall.rs:157:8
    |
157 | pub fn sys_sock_send(sock_idx: usize, va: usize, len: usize, tf: &mut TrapFrame) {
    |        ^^^^^^^^^^^^^

warning: function `sys_sock_recv` is never used
   --> src/traps/syscall.rs:178:8
    |
178 | pub fn sys_sock_recv(sock_idx: usize, va: usize, len: usize, tf: &mut TrapFrame) {
    |        ^^^^^^^^^^^^^

warning: function `sys_sock_create` is never used
   --> src/traps/syscall.rs:187:8
    |
187 | pub fn sys_sock_create(tf: &mut TrapFrame) {
    |        ^^^^^^^^^^^^^^^

warning: function `sys_sock_status` is never used
   --> src/traps/syscall.rs:207:8
    |
207 | pub fn sys_sock_status(sock_idx: usize, tf: &mut TrapFrame) {
    |        ^^^^^^^^^^^^^^^

warning: function `sys_sock_connect` is never used
   --> src/traps/syscall.rs:231:8
    |
231 | pub fn sys_sock_connect(
    |        ^^^^^^^^^^^^^^^^

warning: function `sys_sock_listen` is never used
   --> src/traps/syscall.rs:254:8
    |
254 | pub fn sys_sock_listen(sock_idx: usize, local_port: u16, tf: &mut TrapFrame) {
    |        ^^^^^^^^^^^^^^^

warning: field `0` is never read
  --> src/traps/irq.rs:24:16
   |
24 | pub struct Fiq(IrqHandlerMutex);
   |            --- ^^^^^^^^^^^^^^^
   |            |
   |            field in this struct
   |
   = help: consider removing this field

warning: method `get_page_addr` is never used
  --> src/vm/pagetable.rs:68:8
   |
55 | impl L3Entry {
   | ------------ method in this implementation
...
68 |     fn get_page_addr(&self) -> Option<PhysicalAddr> {
   |        ^^^^^^^^^^^^^

./run.sh
